name: PR metadata guard

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]

permissions:
  pull-requests: read

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const errors = [];

            // Block PRs coming from main or with base==head
            if (pr.head.ref === pr.base.ref || pr.head.ref.toLowerCase() === 'main') {
              errors.push(Use a feature branch (head: '\' → base: '\').);
            }

            // Require at least one requested reviewer (user or team)
            const reviewersCount =
              (pr.requested_reviewers?.length || 0) + (pr.requested_teams?.length || 0);
            if (reviewersCount < 1) errors.push('Request at least one reviewer.');

            // Require at least one assignee
            if (!pr.assignees || pr.assignees.length < 1) errors.push('Set an assignee.');

            // Require a milestone
            if (!pr.milestone) errors.push('Select a milestone.');

            // Optional: enforce a section label (uncomment to enforce)
            // const { data: labels } = await github.rest.issues.listLabelsOnIssue({
            //   owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number
            // });
            // const names = labels.map(l => l.name.toLowerCase());
            // if (!names.includes('section: solution') && !names.includes('section: knowledge')) {
            //   errors.push('Add a section label: "Section: Solution" or "Section: Knowledge".');
            // }

            if (errors.length) {
              core.setFailed(errors.join('\\n'));
            } else {
              core.notice('PR metadata looks good ✅');
            }
