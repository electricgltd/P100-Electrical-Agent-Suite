name: Agent PR Review and Approval

on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  validate-agent-pr:
    runs-on: ubuntu-latest
    if: "contains(github.event.pull_request.labels.*.name, 'agent: generated')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate agent-generated PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            console.log('Validating agent-generated PR:', pr.number);
            
            // Check if PR is marked as draft (required for agent PRs)
            if (!pr.draft) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '‚ö†Ô∏è **Agent PR Policy Violation**\n\nAgent-generated PRs must be opened as **Draft** status.\n\nPlease convert this PR to draft status for review.'
              });
            }
            
            // Check for required PR body content
            const prBody = pr.body || '';
            if (!prBody.includes('AUTOGENERATED-BY-AGENT: true')) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '‚ö†Ô∏è **Missing Agent Marker**\n\nAgent-generated PRs must contain `AUTOGENERATED-BY-AGENT: true` in the PR body.'
              });
            }
            
            // Check branch naming convention
            const branchName = pr.head.ref;
            if (!branchName.startsWith('agent/')) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '‚ö†Ô∏è **Incorrect Branch Name**\n\nAgent branches should follow the format: `agent/<issue-number>-short-slug`\n\nCurrent branch: `' + branchName + '`'
              });
            }
            
            // Add safety checklist comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: 'ü§ñ **Agent-Generated PR Review Checklist**\n\nPlease complete this safety checklist before approving:\n\n- [ ] **Scope verified**: Agent touched only the allowed files/paths\n- [ ] **No secrets exposed**: No sensitive data was exposed to the agent\n- [ ] **Tests pass**: Tests run locally and CI passes\n- [ ] **Security scans**: Linting and security scans are acceptable\n- [ ] **Agent markers**: PR author/commits include `[agent-generated]` marker\n- [ ] **Final approval**: Ready to add `agent: approved` label\n\n**Linked Issue**: Please ensure this PR references the originating sub-issue.\n\n**Branch**: `' + branchName + '`\n\n---\n*This PR requires human approval before it can be merged. Add the `agent: approved` label when ready.*'
            });

  check-approval-status:
    runs-on: ubuntu-latest
    if: "contains(github.event.pull_request.labels.*.name, 'agent: generated')"
    steps:
      - name: Monitor approval status
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = pr.labels.map(label => label.name);
            const hasApproved = labels.includes('agent: approved');
            
            if (hasApproved && pr.draft) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '‚úÖ **Agent PR Approved**\n\nThis PR has been approved for merge. You may now:\n\n1. Convert from Draft to Ready for review\n2. Merge when CI passes\n\nThank you for reviewing the agent-generated changes!'
              });
            }
            
            // Check for conflicting labels
            const hasGenerated = labels.includes('agent: generated');
            const hasDenied = labels.includes('agent: denied');
            
            if (hasGenerated && hasDenied) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: 'üö´ **Agent PR Denied**\n\nThis PR has been closed due to the `agent: denied` label.\n\nIf this was a mistake, please remove the deny label and reopen the PR.'
              });
            }

  validate-commits:
    runs-on: ubuntu-latest  
    if: "contains(github.event.pull_request.labels.*.name, 'agent: generated')"
    steps:
      - name: Check commit messages for agent markers
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Get all commits in the PR
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const invalidCommits = commits.data.filter(commit => 
              !commit.commit.message.includes('[agent-generated]')
            );
            
            if (invalidCommits.length > 0) {
              const commitList = invalidCommits.map(commit => 
                '- ' + commit.sha.substring(0, 7) + ': "' + commit.commit.message + '"'
              ).join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '‚ö†Ô∏è **Missing Agent Markers in Commits**\n\nThe following commits are missing the required `[agent-generated]` marker:\n\n' + commitList + '\n\nAll commits in agent-generated PRs must include this marker for audit purposes.'
              });
            }

  security-scan:
    runs-on: ubuntu-latest
    if: "contains(github.event.pull_request.labels.*.name, 'agent: generated')"
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Basic security check
        run: |
          echo "Performing basic security checks on agent-generated code..."
          
          # Check for potential secrets in changed files
          if git diff --name-only HEAD~1 | xargs grep -l -i -E "(password|secret|key|token|api)" 2>/dev/null; then
            echo "WARNING: Potential secrets found in changed files"
            exit 1
          fi
          
          # Check for suspicious file modifications
          if git diff --name-only HEAD~1 | grep -E "\.(env|key|pem|p12)$" 2>/dev/null; then
            echo "WARNING: Sensitive file types modified"  
            exit 1
          fi
          
          echo "Basic security checks passed"
          
      - name: Report security status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ job.status }}' === 'success';
            const pr = context.payload.pull_request;
            
            if (success) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: 'üõ°Ô∏è **Security Scan Passed**\n\nBasic security checks completed successfully for this agent-generated PR.'
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: 'üö® **Security Scan Failed**\n\nBasic security checks found potential issues. Please review the workflow logs and address any concerns before approval.'
              });
            }